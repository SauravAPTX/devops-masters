name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  id-token: write # For OIDC authentication

env:
  AWS_REGION: ap-south-1
  CLUSTER_NAME: devops-masters-cluster
  ECR_REPOSITORY: devops-masters-app

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Install tfsec
        run: |
          curl -sL https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec and output SARIF
        run: |
          mkdir -p reports
          if [ -d "terraform" ]; then
            tfsec --format sarif --out reports/tfsec.sarif terraform/ --tfvars-file terraform/terraform.tfvars
          else
            echo "No terraform directory found, skipping tfsec scan"
            echo '{"version": "2.1.0", "runs": []}' > reports/tfsec.sarif
          fi

      - name: Upload tfsec SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/tfsec.sarif

      - name: Build Docker image for scanning
        run: |
          if [ -f "./app/Dockerfile" ]; then
            docker build -t test-app:${{ github.sha }} ./app
          else
            echo "No Dockerfile found in ./app directory"
            exit 1
          fi

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Run Trivy vulnerability scanner and output SARIF
        run: |
          trivy image --format sarif --output reports/trivy-results.sarif test-app:${{ github.sha }}

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/trivy-results.sarif

      - name: Check for critical vulnerabilities
        run: |
          # Fail if critical vulnerabilities are found
          trivy image --severity CRITICAL --exit-code 1 test-app:${{ github.sha }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="github_repo=${{ github.repository }}" \
            -var="github_token=${{ secrets.GITHUB_TOKEN }}" \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "ecr-registry=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Setup kubeseal
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/kubeseal-0.24.0-linux-amd64.tar.gz
          tar -xvzf kubeseal-0.24.0-linux-amd64.tar.gz
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Check if Sealed Secrets Controller exists
        id: check-sealed-secrets
        run: |
          if kubectl get deployment sealed-secrets-controller -n kube-system > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Sealed Secrets Controller
        if: steps.check-sealed-secrets.outputs.exists == 'false'
        run: |
          kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/sealed-secrets-controller -n kube-system

      - name: Create and seal secrets
        run: |
          # Create temp directory for secrets
          mkdir -p temp-secrets

          # Create secret manifest
          kubectl create secret generic app-secrets \
            --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
            --from-literal=api-key="${{ secrets.API_KEY }}" \
            --dry-run=client -o yaml > temp-secrets/secret.yaml

          # Seal the secret
          kubeseal -f temp-secrets/secret.yaml -w k8s/sealed-secret.yaml

          # Clean up temp files
          rm -rf temp-secrets

      - name: Apply Sealed Secrets
        run: |
          kubectl apply -f k8s/sealed-secret.yaml

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.aws-account.outputs.ecr-registry }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ steps.aws-account.outputs.ecr-registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker build -t $IMAGE_URI ./app
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          # Update deployment manifest with new image
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/app-deployment.yaml
          sed -i "s|ECR_REGISTRY|${{ steps.aws-account.outputs.ecr-registry }}/${{ env.ECR_REPOSITORY }}|g" k8s/app-deployment.yaml

          # Apply all Kubernetes manifests
          kubectl apply -f k8s/

          # Wait for deployment to complete
          kubectl rollout status deployment/devops-app --timeout=600s

      - name: Setup Terraform for infrastructure updates
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Run Terraform Apply
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="github_repo=${{ github.repository }}" \
            -var="github_token=${{ secrets.GITHUB_TOKEN }}"

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Terratest
        working-directory: tests
        run: |
          if [ ! -f go.mod ]; then
            go mod init terratest
          fi
          go mod tidy
          go test -v -timeout 30m
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [build-and-deploy, test]
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/devops-app || echo "No previous revision to rollback to"
